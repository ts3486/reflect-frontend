/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Snippets API
 * Test description
 * OpenAPI spec version: v1
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  Cycle
} from './snippetsAPI.schemas'


  
  /**
 * List all the Cycle items for given requested user
 */
export const cyclesList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Cycle>> => {
    return axios.get(
      `/cycles`,options
    );
  }


export const getCyclesListKey = () => [`/cycles`] as const;

    
export type CyclesListQueryResult = NonNullable<Awaited<ReturnType<typeof cyclesList>>>
export type CyclesListQueryError = AxiosError<void>

export const useCyclesList = <TError = AxiosError<void>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof cyclesList>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCyclesListKey() : null);
  const swrFn = () => cyclesList(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


/**
 * Create the cycle with given cycle data
 */
export const cyclesCreate = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Cycle>> => {
    return axios.post(
      `/cycles`,undefined,options
    );
  }



/**
 * Retrieves the cycle with given cycle_id
 */
export const cyclesRead = (
    cycleId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Cycle>> => {
    return axios.get(
      `/cycles/${cycleId}`,options
    );
  }


export const getCyclesReadKey = (cycleId: string,) => [`/cycles/${cycleId}`] as const;

    
export type CyclesReadQueryResult = NonNullable<Awaited<ReturnType<typeof cyclesRead>>>
export type CyclesReadQueryError = AxiosError<void>

export const useCyclesRead = <TError = AxiosError<void>>(
 cycleId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof cyclesRead>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(cycleId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCyclesReadKey(cycleId) : null);
  const swrFn = () => cyclesRead(cycleId, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


/**
 * Updates the cycle item with given cycle_id if exists
 */
export const cyclesUpdate = (
    cycleId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Cycle>> => {
    return axios.put(
      `/cycles/${cycleId}`,undefined,options
    );
  }



/**
 * Deletes the cycle item with given cycle_id if exists
 */
export const cyclesDelete = (
    cycleId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/cycles/${cycleId}`,options
    );
  }



