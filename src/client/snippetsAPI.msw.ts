/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * Snippets API
 * Test description
 * OpenAPI spec version: v1
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'

export const getCyclesListMock = () => ({action_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), category: faker.helpers.arrayElement([faker.number.int({min: 0, max: 4294967295}), undefined]), check_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), do_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plan_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), problem_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), status: faker.helpers.arrayElement([faker.word.sample(), undefined]), title: faker.helpers.arrayElement([faker.word.sample(), undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getCyclesCreateMock = () => ({action_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), category: faker.helpers.arrayElement([faker.number.int({min: 0, max: 4294967295}), undefined]), check_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), do_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plan_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), problem_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), status: faker.helpers.arrayElement([faker.word.sample(), undefined]), title: faker.helpers.arrayElement([faker.word.sample(), undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getCyclesReadMock = () => ({action_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), category: faker.helpers.arrayElement([faker.number.int({min: 0, max: 4294967295}), undefined]), check_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), do_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plan_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), problem_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), status: faker.helpers.arrayElement([faker.word.sample(), undefined]), title: faker.helpers.arrayElement([faker.word.sample(), undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getCyclesUpdateMock = () => ({action_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), category: faker.helpers.arrayElement([faker.number.int({min: 0, max: 4294967295}), undefined]), check_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), do_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plan_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), problem_description: faker.helpers.arrayElement([faker.word.sample(), undefined]), status: faker.helpers.arrayElement([faker.word.sample(), undefined]), title: faker.helpers.arrayElement([faker.word.sample(), undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getSnippetsAPIMock = () => [
http.get('*/cycles', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getCyclesListMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/cycles', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getCyclesCreateMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/cycles/:cycleId', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getCyclesReadMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/cycles/:cycleId', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getCyclesUpdateMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/cycles/:cycleId', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),]
